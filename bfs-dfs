<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>BFS and DFS</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: aliceblue;
      margin: 10px;
      padding: 10px;
    }
    textarea {
      width: 50%;
      padding: 10px;
      font-size: 15px;
      height: 200px;
    }
    #outputArea {
      width: 50%;
      background-color: #e3f2fd;
      border-radius: 10px;
      padding: 20px;
      margin-top: 20px;
      margin-left: auto;
      margin-right: auto;
    }
  </style>
</head>

<body>
  <div class="container text-center mt-3">
    <h1 class="mb-3">BFS and DFS Traversal</h1>
    <p>Enter the adjacency list below</p>
    <textarea id="graphInput">
{
  "1": [2, 3],
  "2": [4, 5],
  "3": [6],
  "4": [],
  "5": [],
  "6": []
}
    </textarea>
  </div>

  <div class="container d-flex justify-content-center mb-3">
    <div style="width: 300px;">
      <label for="startNode" class="form-label">Start Node</label>
      <input type="number" id="startNode" class="form-control" value="1" />
    </div>
  </div>

  <div class="container text-center">
    <button onclick="performBFS()" class="btn btn-primary me-2">Run BFS</button>
    <button onclick="performDFS()" class="btn btn-success">Run DFS</button>
  </div>

  <div class="container mt-4">
    <div id="outputArea">
      <h5>Traversal Output:</h5>
      <p id="outputText"></p>
    </div>
  </div>

  <script>
    function performBFS() {
      const graph = getGraphInput();
      const startNode = parseInt(document.getElementById('startNode').value);
      const result = bfs(graph, startNode);
      document.getElementById('outputText').innerHTML = `<strong>BFS:</strong> ${result.join(' → ')}`;
    }

    function performDFS() {
      const graph = getGraphInput();
      const startNode = parseInt(document.getElementById('startNode').value);
      const result = dfs(graph, startNode);
      document.getElementById('outputText').innerHTML = `<strong>DFS:</strong> ${result.join(' → ')}`;
    }

    function getGraphInput() {
      try {
        return JSON.parse(document.getElementById('graphInput').value);
      } catch (e) {
        alert("Please enter a valid JSON object for the graph.");
        return {};
      }
    }

    function bfs(graph, start) {
      const visited = new Set();
      const queue = [start];
      const result = [];

      visited.add(start);

      while (queue.length > 0) {
        const node = queue.shift();
        result.push(node);

        if (graph[node]) {
          graph[node].forEach(neighbor => {
            if (!visited.has(neighbor)) {
              visited.add(neighbor);
              queue.push(neighbor);
            }
          });
        }
      }

      return result;
    }

    function dfs(graph, start) {
      const visited = new Set();
      const result = [];

      function dfsHelper(node) {
        visited.add(node);
        result.push(node);

        if (graph[node]) {
          graph[node].forEach(neighbor => {
            if (!visited.has(neighbor)) {
              dfsHelper(neighbor);
            }
          });
        }
      }

      dfsHelper(start);
      return result;
    }
  </script>
</body>
</html>
