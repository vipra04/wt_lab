<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>BST Array Sort & Search</title>
  <!-- Bootstrap CSS -->
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"/>
  <style>
    body {
      background: #f8f9fa;
    }
    .card {
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <h1 class="text-center mb-4">Integer Array Sort & Search using BST</h1>

    <!-- Integer Array Section -->
    <div class="card mb-4">
      <div class="card-header">Integer Array</div>
      <div class="card-body">
        <p><strong>Array:</strong> <span id="int-array"></span></p>
        <button class="btn btn-primary" id="sort-integers">Sort Integers (BST)</button>
        <input type="number" id="int-search" class="form-control d-inline w-25 ml-2" placeholder="Search integer"/>
        <button class="btn btn-success" id="search-integer">Search</button>
        <p class="mt-3" id="int-result"></p>
      </div>
    </div>
  </div>

  <!-- jQuery + Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

  <!-- Script with BST Logic -->
  <script>
    $(document).ready(function () {
      // Integer array
      let intArray = [42, 15, 9, 67, 28, 13];
      $("#int-array").text(intArray.join(", "));

      // BST Node
      class Node {
        constructor(value) {
          this.value = value;
          this.left = null;
          this.right = null;
        }
      }

      // BST Class
      class BST {
        constructor() {
          this.root = null;
        }

        insert(value) {
          const newNode = new Node(value);
          if (!this.root) {
            this.root = newNode;
            return;
          }

          let current = this.root;
          while (true) {
            if (value < current.value) {
              if (!current.left) {
                current.left = newNode;
                return;
              }
              current = current.left;
            } else {
              if (!current.right) {
                current.right = newNode;
                return;
              }
              current = current.right;
            }
          }
        }

        inOrderTraversal(node = this.root, result = []) {
          if (!node) return result;
          this.inOrderTraversal(node.left, result);
          result.push(node.value);
          this.inOrderTraversal(node.right, result);
          return result;
        }

        search(value) {
          let current = this.root;
          while (current) {
            if (value === current.value) return true;
            current = value < current.value ? current.left : current.right;
          }
          return false;
        }
      }

      let bst = new BST();
      intArray.forEach(num => bst.insert(num));

      // Sort integers using BST
      $("#sort-integers").click(function () {
        const sorted = bst.inOrderTraversal();
        $("#int-array").text(sorted.join(", "));
      });

      // Search integer using BST
      $("#search-integer").click(function () {
        let searchValue = parseInt($("#int-search").val());
        if (!isNaN(searchValue)) {
          let found = bst.search(searchValue);
          if (found) {
            $("#int-result").text(`Found ${searchValue} in the BST.`);
          } else {
            $("#int-result").text(`${searchValue} not found in the BST.`);
          }
        } else {
          $("#int-result").text(`Please enter a valid number.`);
        }
      });
    });
  </script>
</body>
</html>
